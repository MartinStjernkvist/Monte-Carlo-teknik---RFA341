from imports import *
from Alfa_stp_och_RCSDA import Stopping_power_och_steglängd
from upg1_sampla_energi_start import energi_start

@jit(nopython=True)
def riktning_alpha():
    theta = np.arccos(-1 + 2 * np.random.rand())
    phi = 2 * pi * np.random.rand()
    return theta, phi


@jit(nopython=True)
def energiförlust_alpha(energi, steg):
    # Implementera stopping power
    # print('WIP')
    STP,_=Stopping_power_och_steglängd(energi)
    energiförlust=STP*steg #i MeV
    #energiförlust = energi * 0.1
    energi -= energiförlust

    if energi <= 0:
        energi = 0

    return energi




@jit(nopython=True)
def position_start_alpha_innanför(radie_sfär, phi, theta):
    r = radie_sfär * np.random.rand()

    x = r * np.sin(theta) * np.cos(phi)
    # y = r * np.sin(theta) * np.sin(phi)
    # z = r * np.cos(theta)
    y = 0
    z = 0

    position_vektor = np.array([x, y, z])
    return position_vektor


@jit(nopython=True)
def position_start_alpha_skal(radie_sfär, phi, theta):
    radie_alpha=1.2*10**(-15)*4**(1/3) #radie i meter enligt Physics Handbook
    r = radie_sfär - 0.5 * radie_alpha  # För att inte endast theta = pi ska ge utslag

    x = r * np.sin(theta) * np.cos(phi)
    # y = r * np.sin(theta) * np.sin(phi)
    # z = r * np.cos(theta)
    y = 0
    z = 0

    position_vektor = np.array([x, y, z])
    return position_vektor
print(position_start_alpha_innanför(2,pi,pi/2))
"""
@jit(nopython=True)
def laddad_partikel_väg(start_energi, start_position, phi, theta, steglängd, radie, max_antal_steg=100):
    position_vektor = start_position
    energi = start_energi

    steg_storlek = steglängd / max_antal_steg
    riktning = np.array([np.sin(theta) * np.cos(phi), np.sin(theta) * np.sin(phi), np.cos(theta)])
    
    # Manual normalization of the direction vector
    norm = np.sqrt(np.sum(riktning**2))
    riktning /= norm
    
    steg_vektor = riktning * steg_storlek

    energideponering = 0
    for i in range(max_antal_steg):
        position_vektor += steg_vektor
        energi = energiförlust_alpha(energi, steg_storlek)
        
        if np.dot(position_vektor, position_vektor) <= radie:
            energideponering += start_energi - energi
        else:
            break

    return energideponering

@jit(nopython=True)
def run_MC_alpha(iterationer, position_start_alpha, radie, max_antal_steg):
    energideponering_summa = 0
    utanför = 0
    start_energi = energi_start(At211_energi, At211_sannolikhet)

    random_theta = np.random.rand(iterationer)
    random_phi = np.random.rand(iterationer)

    for i in range(iterationer):
        theta, phi = riktning_alpha(random_theta[i], random_phi[i])
        if np.pi / 2 < phi < 3 * np.pi / 2:
            start_position = position_start_alpha(radie, phi, theta)
            _, steglängd = Stopping_power_och_steglängd(start_energi)
            energideponering = laddad_partikel_väg(start_energi, start_position, phi, theta, steglängd, radie, max_antal_steg)
            energideponering_summa += energideponering
        else:
            utanför += 1

    print(f"Antal utanför: {utanför}")
    print(f"Total energideponering: {energideponering_summa}")
    return energideponering_summa

if __name__ == "__main__":
    iterationer = 10 ** 3
    dummy_iterationer = 10**2
    max_antal_steg = 10**3

    #df_stopping_power = pd.read_excel(attenueringsdata_file)

    radie_sfär = 300 * 10 ** (-6)
    

    print(
        '\n----------------------------------------------------------------------\nDUMMY\n----------------------------------------------------------------------\n')

    _ = run_MC_alpha(dummy_iterationer, position_start_alpha_skal, radie_sfär,
                                        max_antal_steg)
    

    start = time.time()

    print(
        '\n----------------------------------------------------------------------\nRIKTIG\n----------------------------------------------------------------------\n')
    energideponering_tot_skal = run_MC_alpha(iterationer, position_start_alpha_skal, radie_sfär, max_antal_steg)

    end_time(start)

    radie_sfär = 1 * 10 ** (-3)

    print(
        '\n----------------------------------------------------------------------\nDUMMY\n----------------------------------------------------------------------\n')

    _ = run_MC_alpha(dummy_iterationer, position_start_alpha_innanför, radie_sfär,
                                                 max_antal_steg)

    start = time.time()
    print(
        '\n----------------------------------------------------------------------\nRIKTIG\n----------------------------------------------------------------------\n')
    energideponering_tot_innanför = run_MC_alpha(iterationer, position_start_alpha_innanför, radie_sfär,
                                                 max_antal_steg)

    end_time(start)

    print(
        '\n----------------------------------------------------------------------\nRESULTAT\n----------------------------------------------------------------------\n')

    print(f'\nSkal: Energideponering per partikel: {energideponering_tot_skal / iterationer:.2f} eV / partikel')
    print(f'Innanför: Energideponering per partikel: {energideponering_tot_innanför / iterationer:.2f} eV / partikel')

"""